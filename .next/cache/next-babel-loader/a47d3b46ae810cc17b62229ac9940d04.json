{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jomicega/projects/courses/pl/nextJs/platzi-market/components/ProductSummary/AddToCart.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Input, Icon, Transition } from 'semantic-ui-react';\nimport { useCartMutations } from '@store/Cart';\n\n// Fake a server Response, we don't care on this project\n// about data persistency, but you may add it :)\nvar addToCartRequest = function addToCartRequest() {\n  return new Promise(function (resolve, reject) {\n    window.setTimeout(resolve, 600);\n  });\n};\n\nvar validate = function validate(quantity) {\n  var error = '';\n  if (quantity < 1) error = \"Can't be blank\";\n  return error;\n};\n\nvar AddToCart = function AddToCart(_ref) {\n  _s();\n\n  var product = _ref.product;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(''),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(1),\n      quantity = _useState3[0],\n      setQuantity = _useState3[1];\n\n  var _useState4 = useState(false),\n      visible = _useState4[0],\n      setVisible = _useState4[1];\n\n  var _useCartMutations = useCartMutations(),\n      addToCart = _useCartMutations.addToCart;\n\n  var toggleMessage = function toggleMessage() {\n    setTimeout(function () {\n      setVisible(false);\n    }, 1000);\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var error;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              error = validate(quantity);\n              setError(error);\n\n              if (!error) {\n                setLoading(true);\n                addToCartRequest().then(function () {\n                  addToCart(product, quantity);\n                  setLoading(false);\n                  setQuantity(quantity);\n                  setVisible(true);\n                  toggleMessage();\n                })[\"catch\"](function (err) {\n                  setError(\"Error: \".concat(err) || 'Something went wrong');\n                  setLoading(false);\n                });\n              }\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleChange = function handleChange(_ref3) {\n    var target = _ref3.target;\n    return setQuantity(parseInt(target.value, 10));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Input, {\n    type: \"number\",\n    placeholder: \"Quantity\",\n    value: quantity,\n    min: 1,\n    step: 1,\n    error: !!error,\n    onChange: handleChange,\n    action: {\n      color: 'green',\n      content: 'Add to Cart',\n      icon: 'plus cart',\n      onClick: handleSubmit,\n      loading: loading,\n      disabled: loading\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), error && __jsx(\"div\", {\n    style: {\n      color: 'red',\n      position: 'absolute'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, error), __jsx(Transition, {\n    duration: {\n      hide: 500,\n      show: 500\n    },\n    visible: visible,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    style: {\n      color: 'green',\n      position: 'absolute'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    name: \"check\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }), \"Added to cart\")));\n};\n\n_s(AddToCart, \"pMZeuVSdCWMHHnmI13dmU7w8lkk=\", false, function () {\n  return [useCartMutations];\n});\n\n_c = AddToCart;\nexport default AddToCart;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddToCart\");","map":{"version":3,"sources":["/Users/jomicega/projects/courses/pl/nextJs/platzi-market/components/ProductSummary/AddToCart.tsx"],"names":["React","useState","Input","Icon","Transition","useCartMutations","addToCartRequest","Promise","resolve","reject","window","setTimeout","validate","quantity","error","AddToCart","product","loading","setLoading","setError","setQuantity","visible","setVisible","addToCart","toggleMessage","handleSubmit","then","err","handleChange","target","parseInt","value","color","content","icon","onClick","disabled","position","hide","show"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\nimport { Input, Icon, Transition } from 'semantic-ui-react'\nimport { useCartMutations } from '@store/Cart'\n\ntype AddToCartProps = {\n  product: TProduct\n}\n\n// Fake a server Response, we don't care on this project\n// about data persistency, but you may add it :)\nconst addToCartRequest = () =>\n  new Promise((resolve, reject) => {\n    window.setTimeout(resolve, 600)\n  })\n\nconst validate = (quantity: number) => {\n  let error = ''\n  if (quantity < 1) error = \"Can't be blank\"\n\n  return error\n}\n\nconst AddToCart = ({ product }: AddToCartProps) => {\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [quantity, setQuantity] = useState(1)\n  const [visible, setVisible] = useState(false)\n  const { addToCart } = useCartMutations()\n\n  const toggleMessage = () => {\n    setTimeout(() => {\n      setVisible(false)\n    }, 1000)\n  }\n\n  const handleSubmit = async () => {\n    const error = validate(quantity)\n    setError(error)\n\n    if (!error) {\n      setLoading(true)\n      addToCartRequest()\n        .then(() => {\n          addToCart(product, quantity)\n          setLoading(false)\n          setQuantity(quantity)\n          setVisible(true)\n          toggleMessage()\n        })\n        .catch((err: Error) => {\n          setError(`Error: ${err}` || 'Something went wrong')\n          setLoading(false)\n        })\n    }\n  }\n\n  const handleChange = ({ target }: React.ChangeEvent<HTMLInputElement>) =>\n    setQuantity(parseInt(target.value, 10))\n\n  return (\n    <>\n      <Input\n        type=\"number\"\n        placeholder=\"Quantity\"\n        value={quantity}\n        min={1}\n        step={1}\n        error={!!error}\n        onChange={handleChange}\n        action={{\n          color: 'green',\n          content: 'Add to Cart',\n          icon: 'plus cart',\n          onClick: handleSubmit,\n          loading,\n          disabled: loading,\n        }}\n      />\n      {error && (\n        <div style={{ color: 'red', position: 'absolute' }}>{error}</div>\n      )}\n      <Transition duration={{ hide: 500, show: 500 }} visible={visible}>\n        <div style={{ color: 'green', position: 'absolute' }}>\n          <Icon name=\"check\" />\n          Added to cart\n        </div>\n      </Transition>\n    </>\n  )\n}\n\nexport default AddToCart\n"]},"metadata":{},"sourceType":"module"}