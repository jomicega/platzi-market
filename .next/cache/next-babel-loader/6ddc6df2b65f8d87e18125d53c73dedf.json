{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useReducer } from 'react';\nvar defaultState = {};\nvar CartItemsContext = React.createContext(defaultState);\nvar CartDispatchContext = React.createContext(function () {});\n\nvar CartProvider = function CartProvider(_ref) {\n  var children = _ref.children;\n\n  var _useReducer = useReducer(cartReducers, defaultState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  return __jsx(CartItemsContext.Provider, {\n    value: state\n  }, __jsx(CartDispatchContext.Provider, {\n    value: dispatch\n  }, children));\n};\n\nfunction cartReducers(state, _ref2) {\n  var item = _ref2.item,\n      type = _ref2.type,\n      _ref2$quantity = _ref2.quantity,\n      qtyToAdd = _ref2$quantity === void 0 ? 1 : _ref2$quantity;\n  var existingCartItem = state[item.id];\n\n  switch (type) {\n    case 'add':\n      {\n        if (existingCartItem != undefined) {\n          var quantity = existingCartItem.quantity + qtyToAdd;\n          return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, item.id, _objectSpread(_objectSpread({}, existingCartItem), {}, {\n            quantity: quantity\n          })));\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, item.id, _objectSpread(_objectSpread({}, item), {}, {\n          quantity: qtyToAdd\n        })));\n      }\n\n    case 'remove':\n      {\n        if (existingCartItem == undefined) {\n          return state;\n        }\n\n        var _quantity = existingCartItem.quantity - 1;\n\n        if (_quantity > 0) {\n          return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, item.id, _objectSpread(_objectSpread({}, existingCartItem), {}, {\n            quantity: _quantity\n          })));\n        }\n\n        var newCartItems = _objectSpread({}, state);\n\n        delete newCartItems[item.id];\n        return newCartItems;\n      }\n\n    default:\n      {\n        throw new Error(\"Unhandled action type: \".concat(type));\n      }\n  }\n}\n\nvar getCartSubTotal = function getCartSubTotal(sum, item) {\n  sum += item.price * item.quantity;\n  return sum;\n};\n\nvar getCartCount = function getCartCount(sum, item) {\n  return sum + item.quantity;\n};\n/**\n * Hey there insatiably brain,\n * Are you interested in this pattern where the Context values are\n * exposed without actually provinding access to the Context itself :)\n * https://kentcdodds.com/blog/how-to-use-react-context-effectively\n */\n\n\nexport var useCart = function useCart() {\n  var itemsById = useContext(CartItemsContext);\n  var items = Object.values(itemsById); // Not familiar with Array.reduce? :)\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\n\n  var count = items.reduce(getCartCount, 0);\n  var subTotal = items.reduce(getCartSubTotal, 0);\n  return {\n    items: items,\n    itemsById: itemsById,\n    count: count,\n    subTotal: subTotal\n  };\n};\nexport var useCartMutations = function useCartMutations() {\n  var dispatch = useContext(CartDispatchContext);\n\n  var addToCart = function addToCart(product, quantity) {\n    return dispatch({\n      type: 'add',\n      item: product,\n      quantity: quantity\n    });\n  };\n\n  var removeFromCart = function removeFromCart(product) {\n    return dispatch({\n      type: 'remove',\n      item: product\n    });\n  };\n\n  return {\n    addToCart: addToCart,\n    removeFromCart: removeFromCart\n  };\n};\nexport default CartProvider;","map":null,"metadata":{},"sourceType":"module"}