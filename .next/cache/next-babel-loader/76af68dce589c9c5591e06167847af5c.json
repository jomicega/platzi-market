{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Input, Icon, Transition } from 'semantic-ui-react';\nimport { useCartMutations } from '@store/Cart';\n\n// Fake a server Response, we don't care on this project\n// about data persistency, but you may add it :)\nconst addToCartRequest = () => new Promise((resolve, reject) => {\n  window.setTimeout(resolve, 600);\n});\n\nconst validate = quantity => {\n  let error = '';\n  if (quantity < 1) error = \"Can't be blank\";\n  return error;\n};\n\nconst AddToCart = ({\n  product\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const {\n    0: quantity,\n    1: setQuantity\n  } = useState(1);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    addToCart\n  } = useCartMutations();\n\n  const toggleMessage = () => {\n    setTimeout(() => {\n      setVisible(false);\n    }, 1000);\n  };\n\n  const handleSubmit = async () => {\n    const error = validate(quantity);\n    setError(error);\n\n    if (!error) {\n      setLoading(true);\n      addToCartRequest().then(() => {\n        addToCart(product, quantity);\n        setLoading(false);\n        setQuantity(quantity);\n        setVisible(true);\n        toggleMessage();\n      }).catch(err => {\n        setError(`Error: ${err}` || 'Something went wrong');\n        setLoading(false);\n      });\n    }\n  };\n\n  const handleChange = ({\n    target\n  }) => setQuantity(parseInt(target.value, 10));\n\n  return __jsx(React.Fragment, null, __jsx(Input, {\n    type: \"number\",\n    placeholder: \"Quantity\",\n    value: quantity,\n    min: 1,\n    step: 1,\n    error: !!error,\n    onChange: handleChange,\n    action: {\n      color: 'green',\n      content: 'Add to Cart',\n      icon: 'plus cart',\n      onClick: handleSubmit,\n      loading,\n      disabled: loading\n    }\n  }), error && __jsx(\"div\", {\n    style: {\n      color: 'red',\n      position: 'absolute'\n    }\n  }, error), __jsx(Transition, {\n    duration: {\n      hide: 500,\n      show: 500\n    },\n    visible: visible\n  }, __jsx(\"div\", {\n    style: {\n      color: 'green',\n      position: 'absolute'\n    }\n  }, __jsx(Icon, {\n    name: \"check\"\n  }), \"Added to cart\")));\n};\n\nexport default AddToCart;","map":null,"metadata":{},"sourceType":"module"}