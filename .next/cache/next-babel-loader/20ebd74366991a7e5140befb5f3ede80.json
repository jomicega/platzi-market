{"ast":null,"code":"var _jsxFileName = \"/Users/jomicega/projects/courses/pl/nextJs/platzi-market/store/Cart.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useReducer } from 'react';\nconst defaultState = {};\nconst CartItemsContext = React.createContext(defaultState);\nconst CartDispatchContext = React.createContext(() => {});\n\nconst CartProvider = ({\n  children\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(cartReducers, defaultState);\n  return __jsx(CartItemsContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(CartDispatchContext.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, children));\n};\n\nfunction cartReducers(state, {\n  item,\n  type,\n  quantity: qtyToAdd = 1\n}) {\n  const existingCartItem = state[item.id];\n\n  switch (type) {\n    case 'add':\n      {\n        if (existingCartItem != undefined) {\n          const quantity = existingCartItem.quantity + qtyToAdd;\n          return _objectSpread(_objectSpread({}, state), {}, {\n            [item.id]: _objectSpread(_objectSpread({}, existingCartItem), {}, {\n              quantity\n            })\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [item.id]: _objectSpread(_objectSpread({}, item), {}, {\n            quantity: qtyToAdd\n          })\n        });\n      }\n\n    case 'remove':\n      {\n        if (existingCartItem == undefined) {\n          return state;\n        }\n\n        const quantity = existingCartItem.quantity - 1;\n\n        if (quantity > 0) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            [item.id]: _objectSpread(_objectSpread({}, existingCartItem), {}, {\n              quantity\n            })\n          });\n        }\n\n        const newCartItems = _objectSpread({}, state);\n\n        delete newCartItems[item.id];\n        return newCartItems;\n      }\n\n    default:\n      {\n        throw new Error(`Unhandled action type: ${type}`);\n      }\n  }\n}\n\nconst getCartSubTotal = (sum, item) => {\n  sum += item.price * item.quantity;\n  return sum;\n};\n\nconst getCartCount = (sum, item) => sum + item.quantity;\n/**\n * Hey there insatiably brain,\n * Are you interested in this pattern where the Context values are\n * exposed without actually provinding access to the Context itself :)\n * https://kentcdodds.com/blog/how-to-use-react-context-effectively\n */\n\n\nexport const useCart = () => {\n  const itemsById = useContext(CartItemsContext);\n  const items = Object.values(itemsById); // Not familiar with Array.reduce? :)\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\n\n  const count = items.reduce(getCartCount, 0);\n  const subTotal = items.reduce(getCartSubTotal, 0);\n  return {\n    items,\n    itemsById,\n    count,\n    subTotal\n  };\n};\nexport const useCartMutations = () => {\n  const dispatch = useContext(CartDispatchContext);\n\n  const addToCart = (product, quantity) => dispatch({\n    type: 'add',\n    item: product,\n    quantity\n  });\n\n  const removeFromCart = product => dispatch({\n    type: 'remove',\n    item: product\n  });\n\n  return {\n    addToCart,\n    removeFromCart\n  };\n};\nexport default CartProvider;","map":{"version":3,"sources":["/Users/jomicega/projects/courses/pl/nextJs/platzi-market/store/Cart.tsx"],"names":["React","useContext","useReducer","defaultState","CartItemsContext","createContext","CartDispatchContext","CartProvider","children","state","dispatch","cartReducers","item","type","quantity","qtyToAdd","existingCartItem","id","undefined","newCartItems","Error","getCartSubTotal","sum","price","getCartCount","useCart","itemsById","items","Object","values","count","reduce","subTotal","useCartMutations","addToCart","product","removeFromCart"],"mappings":"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","sourcesContent":["import React, { Dispatch, useContext, useReducer } from 'react'\n\nexport type CartItemType = TProduct & { quantity: number }\n\nexport type CartState = {\n  [key: string]: CartItemType\n}\n\nexport type CartAction = {\n  type: 'add' | 'remove'\n  item: TProduct\n  quantity?: number\n}\n\nconst defaultState = {} as CartState\n\nconst CartItemsContext = React.createContext(defaultState)\nconst CartDispatchContext = React.createContext((() => {}) as Dispatch<\n  CartAction\n>)\n\nconst CartProvider = ({ children }: { children: React.ReactNode }) => {\n  const [state, dispatch] = useReducer(cartReducers, defaultState)\n\n  return (\n    <CartItemsContext.Provider value={state}>\n      <CartDispatchContext.Provider value={dispatch}>\n        {children}\n      </CartDispatchContext.Provider>\n    </CartItemsContext.Provider>\n  )\n}\n\nfunction cartReducers(\n  state: CartState,\n  { item, type, quantity: qtyToAdd = 1 }: CartAction\n) {\n  const existingCartItem = state[item.id]\n\n  switch (type) {\n    case 'add': {\n      if (existingCartItem != undefined) {\n        const quantity = existingCartItem.quantity + qtyToAdd\n        return {\n          ...state,\n          [item.id]: {\n            ...existingCartItem,\n            quantity,\n          },\n        }\n      }\n\n      return {\n        ...state,\n        [item.id]: {\n          ...item,\n          quantity: qtyToAdd,\n        },\n      }\n    }\n\n    case 'remove': {\n      if (existingCartItem == undefined) {\n        return state\n      }\n\n      const quantity = existingCartItem.quantity - 1\n      if (quantity > 0) {\n        return {\n          ...state,\n          [item.id]: {\n            ...existingCartItem,\n            quantity,\n          },\n        }\n      }\n\n      const newCartItems = { ...state }\n      delete newCartItems[item.id]\n      return newCartItems\n    }\n\n    default: {\n      throw new Error(`Unhandled action type: ${type}`)\n    }\n  }\n}\n\nconst getCartSubTotal = (sum: number, item: CartItemType) => {\n  sum += item.price * item.quantity\n  return sum\n}\nconst getCartCount = (sum: number, item: CartItemType) => sum + item.quantity\n/**\n * Hey there insatiably brain,\n * Are you interested in this pattern where the Context values are\n * exposed without actually provinding access to the Context itself :)\n * https://kentcdodds.com/blog/how-to-use-react-context-effectively\n */\nexport const useCart = () => {\n  const itemsById = useContext(CartItemsContext)\n  const items = Object.values(itemsById)\n  // Not familiar with Array.reduce? :)\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\n  const count = items.reduce(getCartCount, 0)\n  const subTotal = items.reduce(getCartSubTotal, 0)\n\n  return {\n    items,\n    itemsById,\n    count,\n    subTotal,\n  }\n}\nexport const useCartMutations = () => {\n  const dispatch = useContext(CartDispatchContext)\n\n  const addToCart = (product: TProduct, quantity?: number) =>\n    dispatch({\n      type: 'add',\n      item: product,\n      quantity,\n    })\n\n  const removeFromCart = (product: TProduct) =>\n    dispatch({\n      type: 'remove',\n      item: product,\n    })\n\n  return {\n    addToCart,\n    removeFromCart,\n  }\n}\n\nexport default CartProvider\n"]},"metadata":{},"sourceType":"module"}