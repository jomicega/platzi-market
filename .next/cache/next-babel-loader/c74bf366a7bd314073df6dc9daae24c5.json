{"ast":null,"code":"import corsWrapper from 'cors';\n\n/**\n * Hey there you curious :)\n *\n * By default, NextJS APIs are same-site origin only.\n * But since *I needed the main project*\n * to have public API access, I had to configure CORS.\n *\n * @see https://github.com/vercel/next.js/tree/canary/examples/api-routes-cors\n * @see https://github.com/expressjs/cors#configuration-options\n */\nconst CORS_OPTIONS = {\n  methods: ['GET', 'OPTIONS']\n};\n\nfunction promisifyMiddleware(middleware) {\n  return (req, res) => new Promise((resolve, reject) => {\n    middleware(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n} // Initialize the cors middleware\n\n\nconst cors = promisifyMiddleware(corsWrapper(CORS_OPTIONS));\nexport default cors;","map":{"version":3,"sources":["/Users/jomicega/projects/courses/pl/nextJs/platzi-market/cors-middleware.ts"],"names":["corsWrapper","CORS_OPTIONS","methods","promisifyMiddleware","middleware","req","res","Promise","resolve","reject","result","Error","cors"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,MAAxB;;AAGA;;;;;;;;;;AAUA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,SAAR;AADU,CAArB;;AAIA,SAASC,mBAAT,CAA6BC,UAA7B,EAAyD;AACvD,SAAO,CAACC,GAAD,EAAWC,GAAX,KACL,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BL,IAAAA,UAAU,CAACC,GAAD,EAAMC,GAAN,EAAYI,MAAD,IAA6B;AAChD,UAAIA,MAAM,YAAYC,KAAtB,EAA6B;AAC3B,eAAOF,MAAM,CAACC,MAAD,CAAb;AACD;;AACD,aAAOF,OAAO,CAACE,MAAD,CAAd;AACD,KALS,CAAV;AAMD,GAPD,CADF;AASD,C,CAED;;;AACA,MAAME,IAAI,GAAGT,mBAAmB,CAACH,WAAW,CAACC,YAAD,CAAZ,CAAhC;AAEA,eAAeW,IAAf","sourcesContent":["import corsWrapper from 'cors'\nimport { RequestHandler } from 'express'\n\n/**\n * Hey there you curious :)\n *\n * By default, NextJS APIs are same-site origin only.\n * But since *I needed the main project*\n * to have public API access, I had to configure CORS.\n *\n * @see https://github.com/vercel/next.js/tree/canary/examples/api-routes-cors\n * @see https://github.com/expressjs/cors#configuration-options\n */\nconst CORS_OPTIONS = {\n  methods: ['GET', 'OPTIONS'],\n}\n\nfunction promisifyMiddleware(middleware: RequestHandler) {\n  return (req: any, res: any) =>\n    new Promise((resolve, reject) => {\n      middleware(req, res, (result: Error | unknown) => {\n        if (result instanceof Error) {\n          return reject(result)\n        }\n        return resolve(result)\n      })\n    })\n}\n\n// Initialize the cors middleware\nconst cors = promisifyMiddleware(corsWrapper(CORS_OPTIONS))\n\nexport default cors\n"]},"metadata":{},"sourceType":"module"}