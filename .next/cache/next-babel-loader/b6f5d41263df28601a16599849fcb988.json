{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useReducer } from 'react';\nconst defaultState = {};\nconst CartItemsContext = React.createContext(defaultState);\nconst CartDispatchContext = React.createContext(() => {});\n\nconst CartProvider = ({\n  children\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(cartReducers, defaultState);\n  return __jsx(CartItemsContext.Provider, {\n    value: state\n  }, __jsx(CartDispatchContext.Provider, {\n    value: dispatch\n  }, children));\n};\n\nfunction cartReducers(state, {\n  item,\n  type,\n  quantity: qtyToAdd = 1\n}) {\n  const existingCartItem = state[item.id];\n\n  switch (type) {\n    case 'add':\n      {\n        if (existingCartItem != undefined) {\n          const quantity = existingCartItem.quantity + qtyToAdd;\n          return _objectSpread(_objectSpread({}, state), {}, {\n            [item.id]: _objectSpread(_objectSpread({}, existingCartItem), {}, {\n              quantity\n            })\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [item.id]: _objectSpread(_objectSpread({}, item), {}, {\n            quantity: qtyToAdd\n          })\n        });\n      }\n\n    case 'remove':\n      {\n        if (existingCartItem == undefined) {\n          return state;\n        }\n\n        const quantity = existingCartItem.quantity - 1;\n\n        if (quantity > 0) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            [item.id]: _objectSpread(_objectSpread({}, existingCartItem), {}, {\n              quantity\n            })\n          });\n        }\n\n        const newCartItems = _objectSpread({}, state);\n\n        delete newCartItems[item.id];\n        return newCartItems;\n      }\n\n    default:\n      {\n        throw new Error(`Unhandled action type: ${type}`);\n      }\n  }\n}\n\nconst getCartSubTotal = (sum, item) => {\n  sum += item.price * item.quantity;\n  return sum;\n};\n\nconst getCartCount = (sum, item) => sum + item.quantity;\n/**\n * Hey there insatiably brain,\n * Are you interested in this pattern where the Context values are\n * exposed without actually provinding access to the Context itself :)\n * https://kentcdodds.com/blog/how-to-use-react-context-effectively\n */\n\n\nexport const useCart = () => {\n  const itemsById = useContext(CartItemsContext);\n  const items = Object.values(itemsById); // Not familiar with Array.reduce? :)\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\n\n  const count = items.reduce(getCartCount, 0);\n  const subTotal = items.reduce(getCartSubTotal, 0);\n  return {\n    items,\n    itemsById,\n    count,\n    subTotal\n  };\n};\nexport const useCartMutations = () => {\n  const dispatch = useContext(CartDispatchContext);\n\n  const addToCart = (product, quantity) => dispatch({\n    type: 'add',\n    item: product,\n    quantity\n  });\n\n  const removeFromCart = product => dispatch({\n    type: 'remove',\n    item: product\n  });\n\n  return {\n    addToCart,\n    removeFromCart\n  };\n};\nexport default CartProvider;","map":null,"metadata":{},"sourceType":"module"}