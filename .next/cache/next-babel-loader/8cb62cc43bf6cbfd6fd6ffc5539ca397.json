{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Input, Icon, Transition } from 'semantic-ui-react';\nimport { useCartMutations } from '@store/Cart';\n\n// Fake a server Response, we don't care on this project\n// about data persistency, but you may add it :)\nvar addToCartRequest = function addToCartRequest() {\n  return new Promise(function (resolve, reject) {\n    window.setTimeout(resolve, 600);\n  });\n};\n\nvar validate = function validate(quantity) {\n  var error = '';\n  if (quantity < 1) error = \"Can't be blank\";\n  return error;\n};\n\nvar AddToCart = function AddToCart(_ref) {\n  var product = _ref.product;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(''),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(1),\n      quantity = _useState3[0],\n      setQuantity = _useState3[1];\n\n  var _useState4 = useState(false),\n      visible = _useState4[0],\n      setVisible = _useState4[1];\n\n  var _useCartMutations = useCartMutations(),\n      addToCart = _useCartMutations.addToCart;\n\n  var toggleMessage = function toggleMessage() {\n    setTimeout(function () {\n      setVisible(false);\n    }, 1000);\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var error;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              error = validate(quantity);\n              setError(error);\n\n              if (!error) {\n                setLoading(true);\n                addToCartRequest().then(function () {\n                  addToCart(product, quantity);\n                  setLoading(false);\n                  setQuantity(quantity);\n                  setVisible(true);\n                  toggleMessage();\n                })[\"catch\"](function (err) {\n                  setError(\"Error: \".concat(err) || 'Something went wrong');\n                  setLoading(false);\n                });\n              }\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleChange = function handleChange(_ref3) {\n    var target = _ref3.target;\n    return setQuantity(parseInt(target.value, 10));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Input, {\n    type: \"number\",\n    placeholder: \"Quantity\",\n    value: quantity,\n    min: 1,\n    step: 1,\n    error: !!error,\n    onChange: handleChange,\n    action: {\n      color: 'green',\n      content: 'Add to Cart',\n      icon: 'plus cart',\n      onClick: handleSubmit,\n      loading: loading,\n      disabled: loading\n    }\n  }), error && __jsx(\"div\", {\n    style: {\n      color: 'red',\n      position: 'absolute'\n    }\n  }, error), __jsx(Transition, {\n    duration: {\n      hide: 500,\n      show: 500\n    },\n    visible: visible\n  }, __jsx(\"div\", {\n    style: {\n      color: 'green',\n      position: 'absolute'\n    }\n  }, __jsx(Icon, {\n    name: \"check\"\n  }), \"Added to cart\")));\n};\n\nexport default AddToCart;","map":null,"metadata":{},"sourceType":"module"}