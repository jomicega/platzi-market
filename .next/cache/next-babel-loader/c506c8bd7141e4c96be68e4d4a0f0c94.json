{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jomicega/projects/courses/pl/nextJs/platzi-market/pages/yes-or-no/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Input } from 'semantic-ui-react';\n\nvar YesOrNo = function YesOrNo() {\n  _s();\n\n  var _useState = useState(true),\n      visible = _useState[0],\n      setVisible = _useState[1];\n\n  var _useState2 = useState(''),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(1),\n      quantity = _useState3[0],\n      setQuantity = _useState3[1];\n\n  var _useState4 = useState(false),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var validate = function validate(quantity) {\n    var error = '';\n    if (quantity < 1) error = \"Can't be blank\";\n    return error;\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var error;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              error = validate(quantity);\n              setError(error);\n\n              if (!error) {\n                setLoading(true);\n                addToCartRequest().then(function () {\n                  addToCart(product, quantity);\n                  setLoading(false);\n                  setQuantity(quantity);\n                  setVisible(true);\n                  toggleMessage();\n                })[\"catch\"](function (err) {\n                  setError(\"Error: \".concat(err) || 'Something went wrong');\n                  setLoading(false);\n                });\n              }\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleChange = function handleChange(_ref2) {\n    var target = _ref2.target;\n    return setQuantity(parseInt(target.value, 10));\n  };\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(Input, {\n    type: \"number\",\n    placeholder: \"Quantity\",\n    value: 1,\n    min: 1,\n    step: 1,\n    error: !!error,\n    onChange: handleChange,\n    action: {\n      color: 'green',\n      content: 'Add to Cart',\n      icon: 'plus cart',\n      onClick: handleSubmit,\n      loading: loading,\n      disabled: loading\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(YesOrNo, \"GR1rZJevY9p/DBZcSDYHbqx8dgo=\");\n\n_c = YesOrNo;\nexport default YesOrNo;\n\nvar _c;\n\n$RefreshReg$(_c, \"YesOrNo\");","map":{"version":3,"sources":["/Users/jomicega/projects/courses/pl/nextJs/platzi-market/pages/yes-or-no/index.tsx"],"names":["React","useState","Input","YesOrNo","visible","setVisible","error","setError","quantity","setQuantity","loading","setLoading","validate","handleSubmit","addToCartRequest","then","addToCart","product","toggleMessage","err","handleChange","target","parseInt","value","color","content","icon","onClick","disabled"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,KAAT,QAAwC,mBAAxC;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AAAA,kBACUF,QAAQ,CAAC,IAAD,CADlB;AAAA,MACbG,OADa;AAAA,MACJC,UADI;;AAAA,mBAEMJ,QAAQ,CAAC,EAAD,CAFd;AAAA,MAEbK,KAFa;AAAA,MAENC,QAFM;;AAAA,mBAGYN,QAAQ,CAAC,CAAD,CAHpB;AAAA,MAGbO,QAHa;AAAA,MAGHC,WAHG;;AAAA,mBAIUR,QAAQ,CAAC,KAAD,CAJlB;AAAA,MAIbS,OAJa;AAAA,MAIJC,UAJI;;AAMpB,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACJ,QAAD,EAAsB;AACrC,QAAIF,KAAK,GAAG,EAAZ;AACA,QAAIE,QAAQ,GAAG,CAAf,EAAkBF,KAAK,GAAG,gBAAR;AAElB,WAAOA,KAAP;AACD,GALD;;AAOA,MAAMO,YAAY;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACbP,cAAAA,KADa,GACLM,QAAQ,CAACJ,QAAD,CADH;AAEnBD,cAAAA,QAAQ,CAACD,KAAD,CAAR;;AAEA,kBAAI,CAACA,KAAL,EAAY;AACVK,gBAAAA,UAAU,CAAC,IAAD,CAAV;AACAG,gBAAAA,gBAAgB,GACbC,IADH,CACQ,YAAM;AACVC,kBAAAA,SAAS,CAACC,OAAD,EAAUT,QAAV,CAAT;AACAG,kBAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,kBAAAA,WAAW,CAACD,QAAD,CAAX;AACAH,kBAAAA,UAAU,CAAC,IAAD,CAAV;AACAa,kBAAAA,aAAa;AACd,iBAPH,WAQS,UAACC,GAAD,EAAgB;AACrBZ,kBAAAA,QAAQ,CAAC,iBAAUY,GAAV,KAAmB,sBAApB,CAAR;AACAR,kBAAAA,UAAU,CAAC,KAAD,CAAV;AACD,iBAXH;AAYD;;AAlBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZE,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAqBA,MAAMO,YAAY,GAAG,SAAfA,YAAe;AAAA,QAAGC,MAAH,SAAGA,MAAH;AAAA,WACnBZ,WAAW,CAACa,QAAQ,CAACD,MAAM,CAACE,KAAR,EAAe,EAAf,CAAT,CADQ;AAAA,GAArB;;AAGA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,KAAK,EAAE,CAHT;AAIE,IAAA,GAAG,EAAE,CAJP;AAKE,IAAA,IAAI,EAAE,CALR;AAME,IAAA,KAAK,EAAE,CAAC,CAACjB,KANX;AAOE,IAAA,QAAQ,EAAEc,YAPZ;AAQE,IAAA,MAAM,EAAE;AACNI,MAAAA,KAAK,EAAE,OADD;AAENC,MAAAA,OAAO,EAAE,aAFH;AAGNC,MAAAA,IAAI,EAAE,WAHA;AAINC,MAAAA,OAAO,EAAEd,YAJH;AAKNH,MAAAA,OAAO,EAAPA,OALM;AAMNkB,MAAAA,QAAQ,EAAElB;AANJ,KARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAqBD,CA1DD;;GAAMP,O;;KAAAA,O;AA4DN,eAAeA,OAAf","sourcesContent":["import React, { useState } from 'react'\nimport Layout from '@components/Layout/Layout'\nimport { Input, Icon, Transition } from 'semantic-ui-react'\n\nconst YesOrNo = () => {\n  const [visible, setVisible] = useState(true)\n  const [error, setError] = useState('')\n  const [quantity, setQuantity] = useState(1)\n  const [loading, setLoading] = useState(false)\n\n  const validate = (quantity: number) => {\n    let error = ''\n    if (quantity < 1) error = \"Can't be blank\"\n\n    return error\n  }\n\n  const handleSubmit = async () => {\n    const error = validate(quantity)\n    setError(error)\n\n    if (!error) {\n      setLoading(true)\n      addToCartRequest()\n        .then(() => {\n          addToCart(product, quantity)\n          setLoading(false)\n          setQuantity(quantity)\n          setVisible(true)\n          toggleMessage()\n        })\n        .catch((err: Error) => {\n          setError(`Error: ${err}` || 'Something went wrong')\n          setLoading(false)\n        })\n    }\n  }\n\n  const handleChange = ({ target }: React.ChangeEvent<HTMLInputElement>) =>\n    setQuantity(parseInt(target.value, 10))\n\n  return (\n    <div>\n      <Input\n        type=\"number\"\n        placeholder=\"Quantity\"\n        value={1}\n        min={1}\n        step={1}\n        error={!!error}\n        onChange={handleChange}\n        action={{\n          color: 'green',\n          content: 'Add to Cart',\n          icon: 'plus cart',\n          onClick: handleSubmit,\n          loading,\n          disabled: loading,\n        }}\n      />\n    </div>\n  )\n}\n\nexport default YesOrNo\n"]},"metadata":{},"sourceType":"module"}